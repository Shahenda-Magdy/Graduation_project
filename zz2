import numpy
from keras.models import Sequential
from keras.layers import Dense,Dropout,Flatten,Conv2D,MaxPooling2D
from keras.constraints import maxnorm
from keras.optimizers import SGD
from keras.utils import np_utils 
from keras import backend as K 
import threading
import pickle
import socket
import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.utils import to_categorical
from keras.models import Sequential
from keras.layers import Dense
import pygad.kerasga
import sys
import numpy as np
import random
import string
import socket
import tensorflow as tf
import tensorflow
from tensorflow import keras
import sys
import seaborn as sns
import matplotlib.pyplot as plt
from numpy import average
from numpy import array
import pickle
# from noknow.core import ZK, ZKSignature, ZKParameters, ZKData, ZKProof
import pandas as pd
import threading
import numpy as np
import matplotlib.pyplot as plt
import keras
from keras.models import Sequential
from keras.datasets import mnist
from keras.layers import Dense
from keras.optimizers import Adam
from keras.datasets import cifar10
import import_ipynb
from random import randint
import time
z=0
for i in range(0,8):
    # port=5680
    # port=port+i
    x=randint(1, 5)
    z=z+1
    if x==1:
        print("client",z,"is malicious client")
        # if i> 0:
        #     time.sleep(20)
        # else:
        #     time.sleep(30)

       
        (X_train, y_train), (X_test, y_test) = cifar10.load_data()
        X_train = X_train.astype('float32') 
        X_test = X_test.astype('float32') 
        X_train = X_train / 255.0 
        X_test = X_test / 255.0
        y_train = np_utils.to_categorical(y_train) 
        y_test = np_utils.to_categorical(y_test) 
        num_classes = y_test.shape[1]
        model = Sequential()
        model.add(Conv2D(32, (3, 3), input_shape=(32,32,3), activation='relu', padding='same')) 
        model.add(Dropout(0.2)) 
        model.add(Conv2D(32, (3, 3), activation='relu', padding='same')) 
        model.add(MaxPooling2D(pool_size=(2, 2))) 
        model.add(Conv2D(64, (3, 3), activation='relu', padding='same')) 
        model.add(Dropout(0.2)) 
        model.add(Conv2D(64, (3, 3), activation='relu', padding='same')) 
        model.add(MaxPooling2D(pool_size=(2, 2))) 
        model.add(Conv2D(128, (3, 3), activation='relu', padding='same')) 
        model.add(Dropout(0.2)) 
        model.add(Conv2D(128, (3, 3), activation='relu', padding='same')) 
        model.add(MaxPooling2D(pool_size=(2, 2))) 
        model.add(Flatten()) 
        model.add(Dropout(0.2)) 
        model.add(Dense(1024, activation='relu', kernel_constraint=maxnorm(3))) 
        model.add(Dropout(0.2)) 
        model.add(Dense(512, activation='relu', kernel_constraint=maxnorm(3))) 
        model.add(Dropout(0.2)) 
        model.add(Dense(num_classes, activation='softmax'))
        lrate = 0.01 
        decay = lrate/100 
        sgd = SGD(lr=lrate, momentum=0.9, decay=decay, nesterov=False) 
        model.compile(loss='categorical_crossentropy', optimizer=sgd, metrics=['accuracy'])
        # model.fit(X_train, y_train, validation_data=(X_test, y_test), epochs=100, batch_size=32) 
        # Final evaluation of the model 
        scores = model.evaluate(X_test, y_test, verbose=0) 
        print("Accuracy: %.2f%%" % (scores[1]*100))



        class RecvThread(threading.Thread):
            def __init__(self, buffer_size,port):
                threading.Thread.__init__(self)
                self.buffer_size = buffer_size
                self.port=port

            def recv(self,soc):
                received_data = b""
                while True: # str(received_data)[-2] != '.':
                    print("hhh")
                    try:
                        # soc.settimeout(self.recv_timeout)
                        received_data += soc.recv(self.buffer_size)
                # print(received_data)

                        try:
                            pickle.loads(received_data)
                            return received_data
        #                     self.kivy_app.label.text = "All data is received from the server."
                            print("All data is received from the server.")
                            # If the previous pickle.loads() statement is passed, this means all the data is received.
                            # Thus, no need to continue the loop and a break statement should be excuted.
                            break
                        except BaseException:
                            # An exception is expected when the data is not 100% received.
                            pass

                    except socket.timeout:
                        print("A socket.timeout exception occurred because the server did not send any data for {recv_timeout} seconds.".format(recv_timeout=self.recv_timeout))
                        return
            def run(self):
                global server_data
                
                soc = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
                print("Socket is created.")
                print(self.port)
                soc.connect(("192.168.56.1" , self.port))
                # port=port+i

                while True:

                    # data = {"subject": subject, "data": keras_ga, "best_solution_idx": best_sol_idx}
                    data_byte = pickle.dumps(model)

        #             self.kivy_app.label.text = "Sending a Message of Type {subject} to the Server".format(subject=subject)
                    try:
                        soc.sendall(data_byte
                    except BaseException as e:
        #                 self.kivy_app.label.text = "Error Connecting to the Server. The server might has been closed."
                        print("Error Connecting to the Server: {msg}".format(msg=e))
                        break

        #             self.kivy_app.label.text = "Receiving Reply from the Server"
                    received_data= self.recv(soc)
                    if len(received_data)< 1:
                        print("nothing received from server")
                    else:
                        break
        recvThread = RecvThread(buffer_size=1024*1024*1024,port=5680+i)
        recvThread.start()
    
    elif x==2:
        # if i> 0:
        #     time.sleep(20)
        # else:
        #     time.sleep(30)
        print("client",z,"is malicious client")
        

        model = None

        # Preparing the NumPy array of the inputs.
        data_inputs = np.array([[1, 1],
                                [1, 0],
                                [0, 1],
                                [0, 0]])

        # Preparing the NumPy array of the outputs.
        data_outputs = np.array([[1, 0], 
                                    [0, 1], 
                                    [0, 1], 
                                    [1, 0]])

        num_classes = 2
        num_inputs = 2

        # Build the keras model using the functional API.
        input_layer  = tensorflow.keras.layers.Input(num_inputs)
        dense_layer = tensorflow.keras.layers.Dense(4, activation="relu")(input_layer)
        output_layer = tensorflow.keras.layers.Dense(num_classes, activation="softmax")(dense_layer)

        model = tensorflow.keras.Model(inputs=input_layer, outputs=output_layer)

        num_solutions = 10
    # Create an instance of the pygad.kerasga.KerasGA class to build the initial population.
        keras_ga = pygad.kerasga.KerasGA(model=model,
                                        num_solutions=num_solutions)

        class RecvThread(threading.Thread):

            def __init__(self, buffer_size,port):
                threading.Thread.__init__(self)
                self.buffer_size = buffer_size
                self.port=port

            def recv(self,soc):
                received_data = b""
                while True: # str(received_data)[-2] != '.':
                    print("hhh")
                    try:
                        # soc.settimeout(self.recv_timeout)
                        received_data += soc.recv(self.buffer_size)
                # print(received_data)

                        try:
                            pickle.loads(received_data)
                            return received_data
        #                     self.kivy_app.label.text = "All data is received from the server."
                            print("All data is received from the server.")
                            # If the previous pickle.loads() statement is passed, this means all the data is received.
                            # Thus, no need to continue the loop and a break statement should be excuted.
                            break
                        except BaseException:
                            # An exception is expected when the data is not 100% received.
                            pass

                    except socket.timeout:
                        print("A socket.timeout exception occurred because the server did not send any data for {recv_timeout} seconds.".format(recv_timeout=self.recv_timeout))
                        return
            def run(self):
                global server_data
                
                soc = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
                print("Socket is created.")
                print(self.port)
                soc.connect(("192.168.56.1" , self.port))

                while True:

                    # data = {"subject": subject, "data": keras_ga, "best_solution_idx": best_sol_idx}
                    data_byte = pickle.dumps(model)

        #             self.kivy_app.label.text = "Sending a Message of Type {subject} to the Server".format(subject=subject)
                    try:
                        soc.sendall(data_byte)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                    except BaseException as e:
        #                 self.kivy_app.label.text = "Error Connecting to the Server. The server might has been closed."
                        print("Error Connecting to the Server: {msg}".format(msg=e))
                        break

        #             self.kivy_app.label.text = "Receiving Reply from the Server"
                    received_data= self.recv(soc)
                    if len(received_data)< 1:
                        print("nothing received from server")
                    else:
                        break
        recvThread = RecvThread(buffer_size=1024*1024*1024,port=5680+i)
        recvThread.start()
    elif x==3:
        # if i> 0:
        #     time.sleep(20)
        # else:
        #     time.sleep(30)
        print("client",z,"is un malicious client")
        
        
    # import random
    # class client3():
    #     def __init__(self,port):
    #         self.port=port
        (x_train, y_train), (x_test, y_test) = mnist.load_data()
        assert(x_train.shape[0] == y_train.shape[0]), "The number of images is not equal .."
        assert(x_test.shape[0] == y_test.shape[0]), "The number of images is not equal .."
        assert(x_train.shape[1:] == (28, 28)), "The dimension of the images are not 28x28"
        assert(x_test.shape[1:] == (28, 28))
        num_of_samples = []

        cols = 5
        num_of_classes = 10

        y_train = to_categorical(y_train, 10)
        y_test = to_categorical(y_test, 10) 
        x_train = x_train/235
        x_test = x_test/235
        num_pixels = 784
        x_train = x_train.reshape(x_train.shape[0],
                                num_pixels)
        x_test = x_test.reshape(x_test.shape[0],
                                num_pixels)
        print(x_train.shape)
        def create_model():
            model = Sequential()
            model.add(Dense(10, input_dim = num_pixels,
                            activation = 'relu'))
            model.add(Dense(30, activation='relu'))
            model.add(Dense(10, activation='relu'))
            model.add(Dense(num_of_classes, activation='softmax'))
            model.compile(Adam(lr=0.01),
                            loss='categorical_crossentropy',
                        metrics=['accuracy'])
            return model           
            

        model = create_model()
        class RecvThread(threading.Thread):

            def __init__(self, buffer_size,port):
                threading.Thread.__init__(self)
                self.buffer_size = buffer_size
                self.port=port

            def recv(self,soc):
                received_data = b""
                while True: # str(received_data)[-2] != '.':
                    print("hhh")
                    try:
                        # soc.settimeout(self.recv_timeout)
                        received_data += soc.recv(self.buffer_size)
                # print(received_data)

                        try:
                            pickle.loads(received_data)
                            return received_data
        #                     self.kivy_app.label.text = "All data is received from the server."
                            print("All data is received from the server.")
                            # If the previous pickle.loads() statement is passed, this means all the data is received.
                            # Thus, no need to continue the loop and a break statement should be excuted.
                            break
                        except BaseException:
                            # An exception is expected when the data is not 100% received.
                            pass

                    except socket.timeout:
                        print("A socket.timeout exception occurred because the server did not send any data for {recv_timeout} seconds.".format(recv_timeout=self.recv_timeout))
                        return
            def run(self):
                global server_data
                
                soc = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
                print("Socket is created.")
                print(self.port)
                soc.connect(("192.168.56.1" , self.port))

                while True:

                    # data = {"subject": subject, "data": keras_ga, "best_solution_idx": best_sol_idx}
                    data_byte = pickle.dumps(model)

        #             self.kivy_app.label.text = "Sending a Message of Type {subject} to the Server".format(subject=subject)
                    try:
                        soc.sendall(data_byte
                    except BaseException as e:
        #                 self.kivy_app.label.text = "Error Connecting to the Server. The server might has been closed."
                        print("Error Connecting to the Server: {msg}".format(msg=e))
                        break

        #             self.kivy_app.label.text = "Receiving Reply from the Server"
                    received_data= self.recv(soc)
                    if len(received_data)< 1:
                        print("nothing received from server")
                    else:
                        break
        recvThread = RecvThread(buffer_size=1024*1024*1024,port=5680+i)
        recvThread.start()
    else:
        # if i> 0:
        #     time.sleep(20)
        # else:
        #     time.sleep(30)
        print("client",z,"is un malicious client")
        
        
    # import random
    # class client1():
    #     def __init__(self,port):
    #         self.port=port
        (x_train, y_train), (x_test, y_test) = mnist.load_data()
        assert(x_train.shape[0] == y_train.shape[0]), "The number of images is not equal .."
        assert(x_test.shape[0] == y_test.shape[0]), "The number of images is not equal .."
        assert(x_train.shape[1:] == (28, 28)), "The dimension of the images are not 28x28"
        assert(x_test.shape[1:] == (28, 28))
        num_of_samples = []

        cols = 5
        num_of_classes = 10

        y_train = to_categorical(y_train, 10)
        y_test = to_categorical(y_test, 10) 
        x_train = x_train/250 
        x_test = x_test/250
        num_pixels = 784
        x_train = x_train.reshape(x_train.shape[0],
                                num_pixels)
        x_test = x_test.reshape(x_test.shape[0],
                                num_pixels)
        print(x_train.shape)
        def create_model():
            model = Sequential()
            model.add(Dense(10, input_dim = num_pixels,
                            activation = 'relu'))
            model.add(Dense(30, activation='relu'))
            model.add(Dense(10, activation='relu'))
            model.add(Dense(num_of_classes, activation='softmax'))
            model.compile(Adam(lr=0.01),
                            loss='categorical_crossentropy',
                        metrics=['accuracy'])
            return model           
            

        model = create_model()
        class RecvThread(threading.Thread):

            def __init__(self, buffer_size,port):
                threading.Thread.__init__(self)
                self.buffer_size = buffer_size
                self.port=port

            def recv(self,soc):
                received_data = b""
                while True: # str(received_data)[-2] != '.':
                    print("hhh")
                    try:
                        # soc.settimeout(self.recv_timeout)
                        received_data += soc.recv(self.buffer_size)
                # print(received_data)

                        try:
                            pickle.loads(received_data)
                            return received_data
        #                     self.kivy_app.label.text = "All data is received from the server."
                            print("All data is received from the server.")
                            # If the previous pickle.loads() statement is passed, this means all the data is received.
                            # Thus, no need to continue the loop and a break statement should be excuted.
                            break
                        except BaseException:
                            # An exception is expected when the data is not 100% received.
                            pass

                    except socket.timeout:
                        print("A socket.timeout exception occurred because the server did not send any data for {recv_timeout} seconds.".format(recv_timeout=self.recv_timeout))
                        return
            def run(self):
                global server_data
                
                soc = socket.socket(family=socket.AF_INET, type=socket.SOCK_STREAM)
                print("Socket is created.")
                print(self.port)
                soc.connect(("192.168.56.1" , self.port))

                while True:

                    # data = {"subject": subject, "data": keras_ga, "best_solution_idx": best_sol_idx}
                    data_byte = pickle.dumps(model)

        #             self.kivy_app.label.text = "Sending a Message of Type {subject} to the Server".format(subject=subject)
                    try:
                        soc.sendall(data_byte)                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                        
                    except BaseException as e:
        #                 self.kivy_app.label.text = "Error Connecting to the Server. The server might has been closed."
                        print("Error Connecting to the Server: {msg}".format(msg=e))
                        break

        #             self.kivy_app.label.text = "Receiving Reply from the Server"
                    received_data= self.recv(soc)
                    if len(received_data)< 1:
                        print("nothing received from server")
                    else:
                        break
        recvThread = RecvThread(buffer_size=1024*1024*1024,port=5680+i)
        recvThread.start()

    # print(port)
                
